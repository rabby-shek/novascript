export enum TokenType {
  Number = "Number",
  String = "String",
  Identifier = "Identifier",
  ArithmeticOperator = "ArithmeticOperator",
  AssignmentOperator = "AssignmentOperator",
  LogicalOperator = "LogicalOperator",
  ComparisonOperator = "ComparisonOperator",
  BitwiseOperator = "BitwiseOperator",
  Keyword = "Keyword",
  Punctuation = "Punctuation",
  Whitespace = "Whitespace",
  Comment = "Comment",
  Let = "Let",
  Const = "Const",
  Var = "Var",
  Function = "Function",
  Return = "Return",
  If = "If",
  Else = "Else",
  While = "While",
  For = "For",
  Do = "Do",
  Switch = "Switch",
  Case = "Case",
  Default = "Default",
  Break = "Break",
  Continue = "Continue",
  New = "New",
  Try = "Try",
  Catch = "Catch",
  Finally = "Finally",
  Throw = "Throw",
  Class = "Class",
  Extends = "Extends",
  Super = "Super",
  This = "This",
  Import = "Import",
  Export = "Export",
  From = "From",
  Async = "Async",
  Await = "Await",
  Semicolon = "Semicolon",
  CurlyBracket = "CurlyBracket",
  SquareBracket = "SquareBracket",
  Parenthesis = "Parenthesis",
  Dot = "Dot"
}

  
  export const KEYWORDS: Record<string, TokenType> = {
    let: TokenType.Let,
    const: TokenType.Const,
    var: TokenType.Var,
    function: TokenType.Function,
    return: TokenType.Return,
    if: TokenType.If,
    else: TokenType.Else,
    while: TokenType.While,
    for: TokenType.For,
    do: TokenType.Do,
    switch: TokenType.Switch,
    case: TokenType.Case,
    default: TokenType.Default,
    break: TokenType.Break,
    continue: TokenType.Continue,
    new: TokenType.New,
    try: TokenType.Try,
    catch: TokenType.Catch,
    finally: TokenType.Finally,
    throw: TokenType.Throw,
    class: TokenType.Class,
    extends: TokenType.Extends,
    super: TokenType.Super,
    this: TokenType.This,
    import: TokenType.Import,
    export: TokenType.Export,
    from: TokenType.From,
    async: TokenType.Async,
    await: TokenType.Await,
  };